use std::fmt::{Display, Formatter};
use crate::read_file;

struct Board {
    rows: Vec<u8>,
    base_height: usize,
}

#[derive(Clone)]
struct Piece {
    pub rows: Vec<u8>,
}


impl Board {
    pub fn new() -> Board {
        Board {
            rows: vec![],
            base_height: 0,
        }
    }

    pub fn add_rows(&mut self, amount: usize) {
        for _ in 0..amount {
            self.rows.push(0);
        }
    }

    pub fn overlapping(&self, piece: &Piece, row: usize) -> bool {
        for (i, piece_line) in piece.rows.iter().enumerate() {
            if piece_line & self.rows[row - i] > 0 {
                return true;
            }
        }
        false
    }
    pub fn settle(&mut self, piece: Piece, row: usize) {
        let mut cutoff: u8 = 0;
        for (i, piece_line) in piece.rows.iter().enumerate() {
            self.rows[row - i] = self.rows[row - i] | piece_line;
            cutoff = cutoff | self.rows[row - i];

        }

        while self.rows[self.rows.len() - 1] == 0 {
            self.rows.pop();
        }
        if self.rows.len()>10000 {
            self.rows.drain(..9000);
            self.base_height+=9000;
        }
    }
}

impl Display for Board {
    fn fmt(&self, f: &mut Formatter<'_>) -> std::fmt::Result {
        write!(f, "{}", self.rows
            .iter()
            .map(|row|
                format!("{:b}", row + 128)
            )
            .collect::<Vec<String>>().join("\n"))
    }
}


impl Piece {
    pub fn new(rows: Vec<u8>) -> Piece {
        Piece {
            rows
        }
    }

    pub fn copy(piece: &Piece) -> Piece {
        let mut new_piece = Piece {
            rows: vec![]
        };
        for i in 0..piece.rows.len() {
            new_piece.rows.push(piece.rows[i]);
        }
        new_piece
    }

    pub fn can_shift_right(&self) -> bool {
        for row in &self.rows {
            if row & 1 > 0 {
                return false;
            }
        }
        true
    }
    pub fn can_shift_left(&self) -> bool {
        for row in &self.rows {
            if row > &63 {
                return false;
            }
        }
        true
    }

    pub fn shift_right(&mut self) {
        for i in 0..self.rows.len() {
            self.rows[i] >>= 1;
        }
    }
    pub fn shift_left(&mut self) {
        for i in 0..self.rows.len() {
            self.rows[i] <<= 1;
        }
    }
}

pub fn get_move(move_number: usize) -> char {
    //let pattern = ">>><<><>><<<>><>>><<<>>><<<><<<>><>><<>>";
    let pattern = ">><<<<>><>>>><><<>>>><<<>>>><<<<>>><>>>><<<<>>>><<><><<<><<><<<<><<<<>>>><<>>><<<>><<>>><<><<<>>>><>>><<><>><<>>><<<<><>><<>>><<<<><<<<><>><<<<>>><<<<>>>><<<>><><<<<>>><>><<<>><><<<>>><<<<>>><>>>><<<><<>>>><><<<<>>>><<<>>>><>>>><>>>><><<><<>>>><<<>>><<<>>>><><<<><<<<>><>>><<<<><<<><>><><><<><<><<<<>>>><<<<>>><>>><<<><<<<>>><<<<>>>><<<<>>><>>>><<<><<<<>>><<>><>><>><><>>>><<>>><>>>><<<<>><<<>>>><<>><<<>>>><><<<<><>><>>>><>><<<<>>>><<<>>>><>><>>><><<<<>><><<<><<<<>>><<><<<>>><<<<><<>>><<>><<<<><<>>>><<><>>><<><<<>>><<<<><<<<>><>>><<<>>><<<<>>>><<><<>><<<>><<>>>><<<>>>><<>><<>><<><<<<>><<<<>>><<><<<<>>><>><<>><<<<><<<><<<>>>><<<<>><>>>><<<<>><<>>><<>>>><<<<><<<><<>>><>>><<<>>>><>><<><><<<<>>>><<<<>>>><<<<><<<>>><<>><>>>><>>>><<<<>><<<<><<><>><<<<>><<<>>>><<>>>><<<<><<<>>><<<<>>><<>>><<<>>><<><<><<<>>><><<>>><<<>>>><>>>><<<><<<<><<>><><<>>>><><<<<>>><<><<<<><<<<><<<<>>>><<>><<<><<<>><<>>><<>><<<<><<><<<>>><<>><<<><>><<><<<<><<<<>><<>><<><>>><>>><<<>><<<>>>><>>><>><<><<>><><<<<><<<<>>><<<<>>><<<<><<<>>><<<>>>><<<>><<>><><<><<<<><>>>><>>>><<<<><>>><<<>><<<>>>><<<<>><<<<>><<<<>>>><>><<>>>><<<>>><<><<<>>>><<<><<><<<>>>><<<>>>><<>><<<<>>>><><<<>>><>>>><<<>>>><<>><<<<>>>><><<<>><<<>>><<>>><>>>><<>>><><<<<><>>>><><<<<>>>><<<<>><<<>>>><<<>><<<>><<<>>>><><<<<>>><<>>>><<>><><<<>>><<<>><<<>>>><>>>><<>>><<<<>>><<<>><><<<>>><<<<>>>><<>><<>>>><<<<>>><<<><>>><<<>>>><<<<>><<<<><<<<><<<<>>><<<>>><<<>>>><><>>>><>>><<>>><><>>><<>>><>><><<<>>>><<<>><<<<>>><<>>>><<>>><<<>><<<<>><>>><<<>>>><<<>>><<<>>><><><<<>>><<<>><<<>><<<<>><>>><<><>>><<>>><<>>><<<><>>><<<<>>><<<>>><<<>>><>>><<>><<>>>><><<<<>><>>>><<<<><<><<<<>>><>><>>>><<>>>><<>>>><<<>><>>><><<<<>>><><<>><<<>><<<<><<<><<<<><<<>><<>>>><<<<>>><>>><<<<><<<>><<<>>><<>>>><<<<>>>><<>>><><><<<<>>>><>>>><<<<>>><><<<><<<>>><>>><<<<><<<<><>>>><>>>><<><<<>>>><<>>><>>><<<<>>><<<<><<>>>><<<>>><<<<>>><>><<<><>>>><<>>><<<>><<<<>>>><<<>>><<<<><<<<><<>><>>><>><<<<><>>><>>>><<>><>>><<><<<><<>><<<>><>>><<<<>>>><>>>><<<<>>><<<><<<<>>>><<<<>>><<<<>>>><>>><<<>><<>>>><<<<>>>><<<<><<>>>><<<>><>>><<>><><<<<>><<<<>>><<<><<>>><>><<<><>><<>>><>>>><<>>><>>><>><<<><<>>>><<<<><<>><<<<><<<><<<<>>><<<<>>><<<>><<<<>>><<<<>>>><<><<>>><<<<><<>><<<<><<><<<<>>>><<<><<<<>><<<<><>>>><<><<<<>><>>>><><<<>>>><<<>><<<<>>>><<><<<<>><<>><<<<><<<><<>>><<>><>><<><<><>><<<<>>><<>>><>>><<<><<<<><<>>>><<>>><<>><>>>><><<<<><<>><>>><><<>>><<>>>><<<<>>><<<<>>>><<<>><<<<><<<>>><<<>><<<<><<<><><<>>>><<<>>>><<<>>>><<<>>><<>>>><<>>>><<<<>>><<>>><<<>><<>><<>>>><<<>>>><<<<><<>><>>><<<<>>>><<<><<>><>>>><>>>><>>>><<>><<<><<><>><<<>><<<<>><><<>><<>><<>>><><<<>><>><<><<<<><>>><>><<<>>>><<<>>><>>>><<>><><<>><<>>>><<<<><>>>><<>><<>>><<<>>>><<<<>><<>>><<<<>>>><>>><<<>><<<<>>>><<<<>>><<<>><<>>>><<<><<<<>><<<<>><<><<<>>><<>><<<><<<>>>><<<<>>>><<<<>><<<<>><><<>><<<<>>>><<<<>><<>>>><<>><>>>><<<><>><<><>><<>><><<><>>><<<>>>><>>><<>><>><>>>><<<<><<>><<<<><>>>><<>>><<>>><<><>>>><>><<<><<<><>>>><><<><<<<><<><<<<>>>><><<<<>>>><<<>><<>><<<<>>>><<<<>>>><<<>>>><>>><<<>>>><<<>><<<<>>>><<<>><<>>><<<<>>><<><<<<>>>><>><<<>><<>>>><<<<>>>><<>>><<<<>><><<<<>>><<<>>>><<>>>><><>>>><<>>><>>><<<>>><<<>><<<>><<<<><><<><<<<>><>>><>>><><>>><<<>>><<>><<><<<>>>><<<>>><>><><<>>>><<<><>><<<<>><<<><>>><<><<<<>>>><<>>>><<<<>><<<<>><<<<>>>><<<<>>><<<<><<<>><<>><<<<>><<><<<<>><<<<>>><<<<><<<<>>>><<><<<><<<<>>>><<>>><<<<>>>><<<<><<>>><>>><<<><<<<>><<<>>><>>>><><>>>><><>>><<<>>>><<<><>>>><<<>><<<><<>><<><><<<<><<>>><<>><<><<<>>>><<<>>><>>><>><<<<>>><<><<<<>><>>><<<>>>><<>><>>><<<>>><<<>><<<<>>>><>>><>>>><>>><<<>>><<<>>>><<<>><<<>><<<><><>>>><<<<>>>><<<<><>>><><<<<>>><<<<>>><<><><><<>><<><<<<>>><>>>><<>>><<>>>><<<>>><<<>><<<<><>>><>><<<<><<>><<<<><<<<>>>><<<>>><>>>><<<<>>>><<<<><<<<>>>><<<<>>>><<<>><<<<>>>><<>><<<>>>><<<>>>><<<<>><<<><>>>><<><>>>><<<<><>>><><<<><>>>><<>><<<<>><>><<<<>>>><<<<>><<>>><><<<><<<<>>>><>>>><<>><<<><<>>><<>><>><<>><<><<<<>><>><<<<>>>><<<<>><<<<>>><<><<>><>>><<<<>>>><<>>>><<><<>>>><<>><<>>>><<<>><<<<>>>><>>>><<<<><<<><><<<><<<<>><<<><<>><<<<>><<<<>>><<<><<<>><<>><<<>>><<><<>><<>>><<<>>>><>>><<<>>>><<>>><<<<>>>><><>>><<<<>>>><>>>><<<>>><<>>>><<<>><>><>><<<>>><<<>>>><<<>>><<<>>>><<>>>><<<><>><<>>><<<<>>>><><<<<><<>><>><>>><>>>><<>>><<<<>>><<<<><<<>>>><<<<>>>><<<<>>><>><>><<<<>>><<<<>>>><<>>>><<<<><>><<>>>><>>><<>><<<>>><<<>><<<><<<<>>>><<<<>><<>><<>>>><<<<>>>><>><<>>><<<<><<<><><<<>>><<>>><<<>>><<<>><<>>><>><<<>>>><<>>>><<<<>>>><<>><>>>><<<<><>>><<<<>>>><<>>>><<<<>>><<<<>>><<<<>><<>>><<>>>><<>>><<<><<<>>><<>>>><<<<><<>><<<<>>>><>>>><>><><<><<><<<<>><<<><<>>><>>><>>><<<<><<<<><<<<>>>><<>><>>><>>><<<><>>>><>>><>>><<<>><<<><<<>><<<<>>>><<<>>>><<<>><>><<>><<<>>>><<<<>>>><<<>>><><>><<><<<>><<<<>>><<>><<>><<<<>>><<<>>>><<>>>><<<<>>><<<>>><<<><>>>><<<<>><>><<<<>>>><<>>><<<>><><<<><<<<><>>>><>><><>><<<>>>><<<>>><<>>>><><<<<><<<>><<<<>>><<<><<><<<>><>>><><<<>>>><<<<>>>><<<>><>><<<>><<<>><<><<<<>>>><<>>><<<>>><>>>><<<>><<<<>>><<><>><<<<><<<<>><<<>><><>><<<><<<><><<<<>>>><<<><<<<><<<>>>><<>><<><><>>>><><>>><<>>><<<>><<<><<<<>>>><<<><<>><<<<>>><>><<><<>>>><<<>>><<<><<<>>><><<<<>>>><<><>><>>><<>>><<>>>><<>>><<>>>><>><><<<<>><>>><<<>>><<<>><<>>><<<<>><>>><<>>>><<<>>><>>><<<>><<<><<<>>><<><<<>>>><<>><<<<>>><<<>>><<<>>>><>><<<>>><<<<>>>><<><>>>><>>>><<<<>><<<>>>><>>>><<<>><<<<>><<><<>>>><<<<>>><<<<>>><<>><<<<>><<>>><<>>>><>><<>>><<>>>><>>>><>>><<<><<>><<<<>>>><<<>><<<<>>>><<<>><<<><<<>>><<<>><>>><<<<>>>><>>>><<<>><<<<>>><>>>><>><<><><><<<<>>>><<<<><>>><<>><<<>><<<>><<><<>><>><<<><<<>><<<>>><<<>><<>>><<<>>><<<<><>>><>>>><><<>>>><>>>><<<<>>><>>><<<<>>><>>>><>>>><<<<>>>><<>>>><<<>>><<>><<>>><<>>>><<>><>>>><<<>><<<><<><<<>><<<<>>><<>>>><<<<><>><<<>>>><<<>>>><<>><<>>>><<><>><>>><<<<>><<<>>>><<<>>>><<<<>>>><>>>><>>><<<<>>>><<<<><<>>>><<<<>>><<<<>><<>><>>><<<>><<<><<<<>>><><>><>>>><><<><<<<>>>><><<<>><<>>><<<<>>><<<<><>>><<>><>><<<><><>><<>>><<><><<><>><<>>>><<<<><<>><<<><<<><<>>><<<<><>><>>><<<><<<>><<><<<>><<<<>>>><<<>>><<>>>><><>><>>>><>>><>>>><>>><<<<>>>><<<>>><<<<>>>><>><<<<><<>><>><<>>><<<<>>>><<<>>><<<>><<<>><<>><<<<><>>>><>>>><<>>><<<><>><>><<<<>>><>>>><>><<>>>><<<<>><>>><<>>><<<<>>>><<><<<<>>>><<><<>><><>>>><>>><>>>><>>><<><>>><<>>><<<>>><<<<>>>><>>><<>><>><>>>><<>><<<>>><<<>>>><>><<>>><<>>><<><<>>>><<<<>>>><>><<<<>>>><<<<>>>><<>><<>>>><<<<>>>><<<<>><>>><>>>><<<>><>>>><<<><<>>>><<>>><<>>>><<><<<><<<<><<<>>><<>>><<<>>>><<><<<><><<>><<<<><<<<>>><<><<<<>><<<<>>>><<<>>>><<<>><<<<>>><>>><<<<>>><<<>>><<<<>><<<<>>><<>>><<<>><<<<>>><>>><<<>><<<<><<<<>>><<><<<<>>>><<<>>>><<>>><<><<<>>>><>>>><<>>>><>><<>><<>>>><<<<>>><<<>>>><<><<<><>><<<<>>><><>><<>>><<<>><<<>>><<<<><<<>>><<<<>>><<<<>><<><<<<>>>><<<><>><<>><>>>><>><<>><><<<>><<<>><<<<>>>><<<>>><<><<>>>><<>>>><<>>><<>><<<<>>>><<<<>><<>>>><<<>>>><<<<>>><<><<<<>>>><<<><>>><<<>><><>>>><><<<>>>><<<<>><<>><<<>><<><<><<<<>><><<<<>>><<><<>><<<>>>><<<>>><<>>><<<<>><<><<<<>>><<<<><><<<>>><<<><<<<>>><<<<>>><<<<>>><<<<>>><<>>><<<<>>><>><<<>><<<<>>>><><>>>><<><<><<<<>><><<<>>><><<<><<<>>>><<>><<<<>>><<<<><<<>>>><<>>>><<<<>><<<>>>><>>><<<>>>><<<>>>><<<>>><>>>><<<<>><>><<>><><<<<><<<>>>><<<>>><>>>><>>>><<<><<<>>><<>>>><>>><><<<<>><<>>><<<>><<>>><<<<><<<<>>>><<><<<><>>>><<<>>><<>>>><<<<>>>><<<<>>>><>><<<<>>><>>>><<>>>><<<><<>><<<>>><<<><<>>><<<<>>><<<<><<>>>><<>><<<>>><<<<>><<><<<<>>>><<><<>>><<<>>>><<<><<>><<<>>>><<><<>>>><>><<<<>>>><<>><>><<>>><<<><<<<><<<<>>><>><><>>><<<>>><<>><><<>><<<>>><<<>><<<<>>><<<<><<<><>><>>><<<<>>>><<<<>><<<<>><>>>><>>>><>>>><<<<>><>>>><<>><<<>>><<>><><>>>><<><<<<>><<>>><<>>><<>>><<<<>>>><<<<>><<<>>><<><<<<>><<<<>><<><>>>><<<>>>><<<><<>><<<<>>><<<<><>>>><<<<>>>><<>>>><<>><>>><>>><<><<<<>><<<<>><><<>><>><>>><<><<<>>>><<<>>><<<<>>>><<><<><>>><<<<><><<>>>><<<<>><<<<>><<>><<>>>><<>>>><<>>><<<>>>><<>>>><<<<>><>><>><<>>>><<<>>>><<<<>><<<>>><<>>><<<<>>>><>>>><<>>><<>>>><<<<><<>>><<<<>><<<>>>><><<<>>>><<<>>><<<<>>><<<<><<><<><<<<>>><<<>><>>><>><<<<>>><<<<>>><<><<<<>>><>>><<<>>><<>>>><<<>><<>>>><<><<<>><<<>>><<<<>>>><<<<>>>><>>><<>>><<<><<<>>>><<>>>><<><<<><>>><<>><<><<<<>>><>><>>><<<><><<><<<>>><<<><><<>>><<><<>><>>>><>><<<>>><<<>>>><<<>><<<<>>><>>>><<<<>><<<<><<<<><<<><>><<<<><<>>><<<<>>>><<<>>><<<>>>><>>>><<<<><<<<><<<<><<>><><<<<>>>><<<<>><<<>>>><<<>><<<>>>><<<>>>><<<><<>>><>><<<>>><<>><<<>>><>><<<>>><<<<>><>>>><>>>><><>>>><<<>>>><<<<><<><<><>><>>>><><<>><<<>>><<<<><>><<>><>>>><><<<>>>><<<>>>><<>>>><>>><>>>><<<>>><>><<<<><<<<>>>><<<<>><<<>>><<>>><<<<>>><<<>><>>><<><<<><<>>><<>><<>>><<<<>>><<<>>>><<<<><<<<>>>><<<>>>><<<<>>>><<><>><<<><><<>>>><><<<>>><<>>><<>>>><<<<>>><<<>>><<<<>>>><<>>><<<>><>>>><<>><<<><<><<<>><<<<>>><><>>>><><<><><<>>>><<>>>><>><><>>>><<<><<<<>>>><<<>><<<>><<<>>><<<>><<<>>><<<><<<>>>><<<<><<>><<<>>><<<<>>>><<<<>><<<<>>>><>>><<><<>>><><<<>><<><<<<>>><<<<>>><<<<>><<<>>><<<<><>><<>>><<<<>>><<<>><<<>><<<>>><><<<>><<>>><>><>><<>>><<<>>>><<<>>>><<>>><>><>><<>>><<>>>><<>>><><<<>><<>>><<>><<>><<<<>>>><>>>><<>><<<><<>><<<<>>>><<<<>><<>><>><<<>><<<<><<><<>>>><<>>>><<<>><<<<>>><<<<><<<>><<<>><>>>><>>>><<><>>>><<<>>><<<<>>><<<>><<<<>>><<<><<<>>><>>><<<<>><<>>>><<>><<<>><<<>>>><<<<>><<>>><<<<>><<>>>><<><<<>>><<<<>><>>>><<<<>>>><>>>><>>><<<>>><<<>>><>><>>>><<<<>>><<<<>>><<>>><>>><><<<>><<<<>>>><>>>><<<>><>>>><<>>>><<<><<>>><<<<>>>><<><>>><<<<>><<<>>><>>><<>>><<<><>>><<><<<>>>><<<<>><>>>><<><<>><>>><<>><>>>><<<<>>>><<<<>>><<>><<><><<<<>>>><<>>><<<>>>><<<>>><<<<>><<<<>><<>>>><<<<><<>>><<<><<<>><<<<>>><<<<>><<<>>><<><<>><<<<>>><<<<>>><<><>>><<<><<<<>>>><<<<>>>><>><>>><<<>>>><<<><<>>><<>><<<<>>><<<<><<<><<<>>><<>><>><>>>><>>>><><<<><><<<<><>>>><<>>><>>>><<>>><<<<>>>><<>>><>>>><<<>><><<>>>><<>>><<<>>><<<><<<>><<<>>><<<>>><<><<>><<<>>><<<<>>><<>>><>>><<<<>>><<>>>><<<><<<<>>><>><<<<>><>>><<>><>>>><<><<<<>>><<<<>><<>>><<<>>>><<<<>>><<<>><>>>><<<<>>><>>>><<>><>>><><>>><>>>><<<<>><<<><><<>><>><<<><<>>><<>>><<>><<<>>><<<<>><>><<<>><<<<>>>><<>>><>><<<<>>><<<><<>><>>>><<><<>>><<<>><><<<>>>><<<<><<<<>>>><<<>>><<<><>>><<<>>><<<<>><<<><<>>>><<<<>>>><<>><><<>>><<<<>>><>><<<<>>><>>>><>>><<<<>>><<><<<>>>><<<><<<>>><<<<>>><<<>>>><<<>><>><<<<>>>><<<<>><<<><>><<<><<>>>><<<>><<<<>>><<<<>>>><>><<<>>><<>>><<><<>><<<<>><<<<>><>><<<>>>><<<>>><<<>>><<>>>><<>>>><<>><<>><<>><<>><<>><<><>><>>><<<>>><<><<<<>>>><><<<>><<<<>>>><>><>>>><<><<<><>>";
    pattern.chars().nth(move_number % pattern.len()).unwrap()
}

pub fn run() {
    let mut board = Board::new();
    let pieces: Vec<Piece> = vec![
        Piece::new(vec![
            0b0011110
        ]),
        Piece::new(vec![
            0b0001000,
            0b0011100,
            0b0001000,
        ]),
        Piece::new(vec![
            0b0000100,
            0b0000100,
            0b0011100,
        ]),
        Piece::new(vec![
            0b0010000,
            0b0010000,
            0b0010000,
            0b0010000,
        ]),
        Piece::new(vec![
            0b0011000,
            0b0011000,
        ]),
    ];

    let mut current_block_type: usize = 0;
    let mut current_move = 0;
    let mut block_count = 0;

    // loop
    loop {
        // new rock
        let mut rock = Piece::copy(&pieces[current_block_type]);
        // board: add 3+height rock lines
        board.add_rows(rock.rows.len() + 3);
        // set rock-y to board-height
        let mut current_position = board.rows.len() - 1;
        // loop
        loop {
            // shift left/right
            let movetype = get_move(current_move);
            current_move += 1;
            match movetype {
                '>' => {
                    if rock.can_shift_right() {
                        rock.shift_right();
                        if board.overlapping(&rock, current_position) {
                            rock.shift_left();
                        }
                    }
                }
                '<' => {
                    if rock.can_shift_left() {
                        rock.shift_left();
                        if board.overlapping(&rock, current_position) {
                            rock.shift_right();
                        }
                    }
                }
                _ => {}
            }
            // if can fall down
            if current_position < rock.rows.len() - 1 || (current_position > rock.rows.len() - 1 && !board.overlapping(&rock, current_position - 1)) {
                // fall down: decrease rock-y
                current_position -= 1;
            } else {
                block_count += 1;
                board.settle(rock, current_position);
                //println!("{}\n", board);
                break;
            }
        }

        current_block_type = (current_block_type + 1) % pieces.len();
        if block_count == 2022 {
            break;
        }
    }
    println!("{}", board.rows.len() + board.base_height);
}

pub fn run2() {
    let mut board = Board::new();
    let pieces: Vec<Piece> = vec![
        Piece::new(vec![
            0b0011110
        ]),
        Piece::new(vec![
            0b0001000,
            0b0011100,
            0b0001000,
        ]),
        Piece::new(vec![
            0b0000100,
            0b0000100,
            0b0011100,
        ]),
        Piece::new(vec![
            0b0010000,
            0b0010000,
            0b0010000,
            0b0010000,
        ]),
        Piece::new(vec![
            0b0011000,
            0b0011000,
        ]),
    ];

    let mut current_block_type: usize = 0;
    let mut current_move = 0;
    let mut block_count: usize = 0;

    // loop
    loop {
        // new rock
        let mut rock = Piece::copy(&pieces[current_block_type]);
        // board: add 3+height rock lines
        board.add_rows(rock.rows.len() + 3);
        // set rock-y to board-height
        let mut current_position = board.rows.len() - 1;
        // loop
        loop {
            // shift left/right
            let movetype = get_move(current_move);
            current_move += 1;
            match movetype {
                '>' => {
                    if rock.can_shift_right() {
                        rock.shift_right();
                        if board.overlapping(&rock, current_position) {
                            rock.shift_left();
                        }
                    }
                }
                '<' => {
                    if rock.can_shift_left() {
                        rock.shift_left();
                        if board.overlapping(&rock, current_position) {
                            rock.shift_right();
                        }
                    }
                }
                _ => {}
            }
            // if can fall down
            if current_position < rock.rows.len() - 1
                || (
                current_position > rock.rows.len() - 1
                    && !board.overlapping(&rock, current_position - 1)
            ) {
                // fall down: decrease rock-y
                current_position -= 1;
            } else {
                block_count += 1;
                board.settle(rock, current_position);
                //println!("{}\n", board);
                break;
            }
        }

        current_block_type = (current_block_type + 1) % pieces.len();
        if block_count >= 1_000_000 {
            break;
        }
    }
    println!("{}", board.rows.len() + board.base_height);
}
